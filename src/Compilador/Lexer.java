// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Compilador/Lexer.flex
package Compilador;
import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\3\0\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\2\24\4\25\1\26\1\27\1\30\1\31\1\30"+
    "\1\0\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\44\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\44\1\61\1\44\1\62\1\0\1\63\1\6"+
    "\1\64\1\0\1\65\1\34\1\35\1\66\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\67"+
    "\1\70\1\52\1\44\1\71\1\54\1\72\1\56\1\57"+
    "\1\60\1\44\1\61\1\44\1\73\1\0\1\74\7\0"+
    "\1\3\73\0\1\44\7\0\1\44\3\0\1\44\3\0"+
    "\1\44\1\0\1\44\6\0\1\44\1\0\1\44\4\0"+
    "\1\44\7\0\1\44\3\0\1\44\3\0\1\44\1\0"+
    "\1\44\6\0\1\44\1\0\1\44\u0163\0\12\75\206\0"+
    "\12\75\306\0\12\75\234\0\12\75\166\0\12\75\140\0"+
    "\12\75\166\0\12\75\106\0\12\75\u0116\0\12\75\106\0"+
    "\12\75\u0146\0\12\75\46\0\12\75\u012c\0\12\75\200\0"+
    "\12\75\246\0\12\75\6\0\12\75\266\0\12\75\126\0"+
    "\12\75\206\0\12\75\6\0\12\75\316\0\2\3\u01a6\0"+
    "\12\75\46\0\12\75\306\0\12\75\26\0\12\75\126\0"+
    "\12\75\u0196\0\12\75\6\0\u0100\3\240\0\12\75\206\0"+
    "\12\75\u012c\0\12\75\200\0\12\75\74\0\12\75\220\0"+
    "\12\75\166\0\12\75\146\0\12\75\206\0\12\75\106\0"+
    "\12\75\266\0\12\75\u0164\0\62\75\100\0\12\75\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\3\1\6\1\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\1\24\15\1\16\1\17\2\15\1\20\1\21"+
    "\1\22\1\23\1\0\1\24\5\0\1\10\1\23\1\2"+
    "\1\0\1\25\1\0\1\23\1\26\1\27\7\15\1\30"+
    "\4\15\1\31\3\15\1\30\1\15\1\32\12\15\1\33"+
    "\4\0\4\2\1\10\1\34\1\35\14\15\1\36\4\15"+
    "\1\37\5\15\3\0\2\2\1\0\3\2\1\40\1\15"+
    "\1\41\4\15\1\30\5\15\4\0\1\2\1\0\1\2"+
    "\10\15\3\0\3\2\1\0\1\2\3\15\1\42\1\0"+
    "\1\43\1\15\4\0\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\76"+
    "\0\76\0\u01b2\0\u01f0\0\u022e\0\u01f0\0\u026c\0\u01f0\0\u01f0"+
    "\0\u02aa\0\370\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e"+
    "\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e"+
    "\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\76"+
    "\0\76\0\u07fe\0\u083c\0\76\0\76\0\174\0\u0136\0\u087a"+
    "\0\76\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u01f0"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u02aa\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0554\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0554\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0554\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u0a6a\0\u141a\0\u0554"+
    "\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u0554\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u0554\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\76\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\u0554\0\u1b5e\0\u0554\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264"+
    "\0\u22a2\0\u22e0\0\u22a2\0\u231e\0\u235c\0\u239a\0\u23d8\0\76"+
    "\0\u2416\0\76\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\6\1\12\1\13\1\14\1\15\1\6\6\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\3\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\35\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\35\1\27\1\53"+
    "\1\35\1\42\1\44\1\54\1\55\1\2\77\0\2\56"+
    "\1\0\1\56\72\0\1\56\1\3\1\0\1\56\122\0"+
    "\1\21\52\0\1\57\3\0\2\57\1\0\1\57\1\0"+
    "\1\57\57\0\2\60\1\0\1\60\2\0\1\61\10\0"+
    "\1\62\1\63\1\64\1\65\1\66\1\60\5\0\27\60"+
    "\2\0\7\60\11\0\1\57\3\0\2\57\1\0\1\57"+
    "\1\0\1\57\6\67\64\0\1\70\1\0\1\70\7\0"+
    "\2\70\54\0\1\57\3\0\1\71\1\57\1\0\1\57"+
    "\1\0\1\57\6\67\66\0\1\72\1\0\6\16\5\0"+
    "\27\73\2\0\7\73\10\0\1\74\22\0\1\75\1\74"+
    "\64\0\6\76\5\0\27\77\2\0\7\77\23\0\6\73"+
    "\5\0\15\35\1\100\11\35\2\0\7\35\23\0\6\73"+
    "\5\0\16\35\1\101\1\35\1\102\6\35\2\0\4\35"+
    "\1\101\1\102\1\35\23\0\6\73\5\0\1\103\12\35"+
    "\1\104\13\35\2\0\1\35\1\103\5\35\23\0\6\73"+
    "\5\0\1\105\3\35\1\106\11\35\1\107\10\35\2\0"+
    "\1\35\1\105\2\35\1\107\2\35\23\0\6\73\5\0"+
    "\13\35\1\110\1\35\1\111\11\35\2\0\3\35\1\111"+
    "\3\35\23\0\6\73\5\0\16\35\1\112\10\35\2\0"+
    "\4\35\1\112\2\35\23\0\6\73\5\0\1\105\26\35"+
    "\2\0\1\35\1\105\5\35\23\0\6\73\5\0\16\35"+
    "\1\113\10\35\2\0\4\35\1\113\2\35\23\0\6\73"+
    "\5\0\5\35\1\114\7\35\1\115\11\35\2\0\3\35"+
    "\1\115\3\35\23\0\6\73\5\0\27\35\2\0\7\35"+
    "\23\0\6\73\5\0\10\35\1\116\16\35\2\0\7\35"+
    "\23\0\6\73\5\0\4\35\1\117\11\35\1\120\4\35"+
    "\1\121\3\35\2\0\4\35\1\107\2\35\23\0\6\73"+
    "\5\0\20\35\1\122\6\35\2\0\7\35\23\0\6\73"+
    "\5\0\20\35\1\123\2\35\1\124\3\35\2\0\5\35"+
    "\1\123\1\35\23\0\6\73\5\0\4\35\1\125\22\35"+
    "\2\0\7\35\23\0\6\73\5\0\22\35\1\126\2\35"+
    "\1\127\1\35\2\0\6\35\1\126\23\0\6\73\5\0"+
    "\7\35\1\130\1\131\16\35\2\0\7\35\23\0\6\73"+
    "\5\0\16\35\1\132\10\35\2\0\4\35\1\132\2\35"+
    "\23\0\6\73\5\0\7\35\1\133\17\35\2\0\7\35"+
    "\23\0\6\73\5\0\4\35\1\134\22\35\2\0\7\35"+
    "\23\0\6\73\5\0\27\135\2\0\7\135\23\0\6\73"+
    "\5\0\4\35\1\117\11\35\1\107\4\35\1\121\3\35"+
    "\2\0\4\35\1\107\2\35\4\0\2\60\1\0\1\60"+
    "\2\0\1\61\10\0\6\60\5\0\27\60\2\0\7\60"+
    "\4\0\2\60\1\0\1\60\2\0\1\61\10\0\1\136"+
    "\5\137\5\0\27\60\2\0\7\60\4\0\2\60\1\0"+
    "\1\60\2\0\1\61\10\0\6\137\5\0\27\60\2\0"+
    "\7\60\4\0\2\60\1\0\1\60\2\0\1\61\10\0"+
    "\4\137\2\140\5\0\27\60\2\0\7\60\4\0\2\60"+
    "\1\0\1\60\2\0\1\61\10\0\2\140\4\141\5\0"+
    "\27\60\2\0\7\60\4\0\2\60\1\0\1\60\2\0"+
    "\1\61\10\0\6\141\5\0\27\60\2\0\7\60\21\0"+
    "\1\72\1\0\6\67\50\0\2\142\1\143\1\142\1\144"+
    "\5\142\1\145\63\142\20\0\6\146\70\0\6\73\5\0"+
    "\27\73\2\0\7\73\34\0\1\75\64\0\6\76\5\0"+
    "\27\147\2\0\7\147\23\0\6\77\5\0\27\77\2\0"+
    "\7\77\23\0\6\73\5\0\3\35\1\150\23\35\2\0"+
    "\7\35\23\0\6\73\5\0\16\35\1\151\10\35\2\0"+
    "\4\35\1\151\2\35\23\0\6\73\5\0\4\35\1\152"+
    "\22\35\2\0\7\35\23\0\6\73\5\0\21\35\1\153"+
    "\1\154\4\35\2\0\6\35\1\154\23\0\6\73\5\0"+
    "\1\155\26\35\2\0\1\35\1\155\5\35\23\0\6\73"+
    "\5\0\22\35\1\156\4\35\2\0\6\35\1\156\23\0"+
    "\6\73\5\0\5\35\1\157\21\35\2\0\7\35\23\0"+
    "\6\73\5\0\21\35\1\160\5\35\2\0\7\35\23\0"+
    "\6\73\5\0\3\35\1\107\23\35\2\0\2\35\1\107"+
    "\4\35\23\0\6\73\5\0\16\35\1\161\10\35\2\0"+
    "\4\35\1\161\2\35\23\0\6\73\5\0\23\35\1\162"+
    "\3\35\2\0\7\35\23\0\6\73\5\0\2\35\1\163"+
    "\24\35\2\0\7\35\23\0\6\73\5\0\15\35\1\164"+
    "\11\35\2\0\3\35\1\164\3\35\23\0\6\73\5\0"+
    "\25\35\1\107\1\35\2\0\7\35\23\0\6\73\5\0"+
    "\22\35\1\165\4\35\2\0\7\35\23\0\6\73\5\0"+
    "\13\35\1\166\1\167\12\35\2\0\7\35\23\0\6\73"+
    "\5\0\10\35\1\170\16\35\2\0\7\35\23\0\6\73"+
    "\5\0\1\35\1\171\25\35\2\0\7\35\23\0\6\73"+
    "\5\0\17\35\1\172\2\35\1\173\4\35\2\0\6\35"+
    "\1\173\23\0\6\73\5\0\1\174\26\35\2\0\1\35"+
    "\1\174\5\35\23\0\6\73\5\0\10\35\1\175\16\35"+
    "\2\0\7\35\23\0\6\73\5\0\10\35\1\134\16\35"+
    "\2\0\7\35\23\0\6\73\5\0\14\35\1\176\12\35"+
    "\2\0\7\35\23\0\6\73\5\0\10\35\1\111\16\35"+
    "\2\0\7\35\23\0\6\73\5\0\10\35\1\177\16\35"+
    "\2\0\7\35\23\0\6\73\5\0\21\35\1\107\5\35"+
    "\2\0\7\35\23\0\6\135\5\0\27\135\2\0\7\135"+
    "\4\0\2\60\1\0\1\60\2\0\1\61\10\0\6\60"+
    "\1\200\4\0\27\60\2\0\7\60\4\0\2\60\1\0"+
    "\1\60\2\0\1\61\5\0\1\201\2\0\6\60\1\200"+
    "\4\0\27\60\2\0\7\60\4\0\2\60\1\0\1\60"+
    "\2\0\1\61\5\0\1\201\2\0\6\60\1\202\4\0"+
    "\27\60\2\0\7\60\4\0\2\60\1\0\1\60\2\0"+
    "\1\61\10\0\6\60\1\202\4\0\27\60\2\0\7\60"+
    "\3\0\2\142\1\203\1\142\1\204\71\142\12\0\1\205"+
    "\65\0\1\203\7\0\1\205\63\0\2\206\1\207\1\206"+
    "\1\207\5\206\1\210\63\206\20\0\6\147\5\0\27\147"+
    "\2\0\7\147\23\0\6\73\5\0\13\35\1\211\13\35"+
    "\2\0\7\35\23\0\6\73\5\0\1\212\26\35\2\0"+
    "\1\35\1\212\5\35\23\0\6\73\5\0\4\35\1\213"+
    "\22\35\2\0\7\35\23\0\6\73\5\0\4\35\1\214"+
    "\22\35\2\0\7\35\23\0\6\73\5\0\21\35\1\134"+
    "\5\35\2\0\7\35\23\0\6\73\5\0\4\35\1\211"+
    "\22\35\2\0\7\35\23\0\6\73\5\0\1\215\26\35"+
    "\2\0\1\35\1\215\5\35\23\0\6\73\5\0\4\35"+
    "\1\114\22\35\2\0\7\35\23\0\6\73\5\0\22\35"+
    "\1\216\4\35\2\0\6\35\1\216\23\0\6\73\5\0"+
    "\20\35\1\211\6\35\2\0\5\35\1\211\1\35\23\0"+
    "\6\73\5\0\13\35\1\217\13\35\2\0\7\35\23\0"+
    "\6\73\5\0\23\35\1\211\3\35\2\0\7\35\23\0"+
    "\6\73\5\0\13\35\1\107\13\35\2\0\7\35\23\0"+
    "\6\73\5\0\3\35\1\211\1\35\1\211\21\35\2\0"+
    "\2\35\1\211\4\35\23\0\6\73\5\0\15\35\1\220"+
    "\11\35\2\0\3\35\1\220\3\35\23\0\6\73\5\0"+
    "\13\35\1\221\13\35\2\0\7\35\23\0\6\73\5\0"+
    "\23\35\1\222\3\35\2\0\7\35\23\0\6\73\5\0"+
    "\22\35\1\221\4\35\2\0\6\35\1\221\23\0\6\73"+
    "\5\0\22\35\1\223\4\35\2\0\6\35\1\223\23\0"+
    "\6\73\5\0\4\35\1\224\22\35\2\0\7\35\23\0"+
    "\6\73\5\0\13\35\1\225\13\35\2\0\7\35\23\0"+
    "\5\226\71\0\1\227\1\230\74\0\5\231\53\0\1\203"+
    "\110\0\1\203\60\0\2\206\1\207\1\206\1\207\5\206"+
    "\1\232\63\206\12\207\1\233\63\207\2\206\1\207\1\206"+
    "\1\207\5\206\1\210\4\206\1\234\56\206\20\0\6\73"+
    "\5\0\12\35\1\107\14\35\2\0\7\35\23\0\6\73"+
    "\5\0\15\35\1\235\11\35\2\0\3\35\1\235\3\35"+
    "\23\0\6\73\5\0\23\35\1\236\3\35\2\0\7\35"+
    "\23\0\6\73\5\0\10\35\1\237\16\35\2\0\7\35"+
    "\23\0\6\73\5\0\23\35\1\240\3\35\2\0\7\35"+
    "\23\0\6\73\5\0\22\35\1\213\4\35\2\0\6\35"+
    "\1\213\23\0\6\73\5\0\10\35\1\241\16\35\2\0"+
    "\7\35\23\0\6\73\5\0\20\35\1\242\6\35\2\0"+
    "\5\35\1\242\1\35\23\0\6\73\5\0\2\35\1\243"+
    "\24\35\2\0\7\35\23\0\6\73\5\0\21\35\1\244"+
    "\5\35\2\0\7\35\23\0\6\73\5\0\4\35\1\172"+
    "\22\35\2\0\7\35\23\0\6\245\71\0\5\246\70\0"+
    "\3\246\73\0\6\247\50\0\2\250\1\251\1\250\1\252"+
    "\5\250\1\232\4\250\1\142\56\250\12\253\1\233\2\253"+
    "\1\251\1\253\1\0\56\253\2\234\1\254\1\234\1\254"+
    "\5\234\1\142\63\234\20\0\6\73\5\0\1\211\26\35"+
    "\2\0\1\35\1\211\5\35\23\0\6\73\5\0\13\35"+
    "\1\255\13\35\2\0\7\35\23\0\6\73\5\0\14\35"+
    "\1\156\12\35\2\0\7\35\23\0\6\73\5\0\3\35"+
    "\1\256\23\35\2\0\2\35\1\256\4\35\23\0\6\73"+
    "\5\0\2\35\1\107\24\35\2\0\7\35\23\0\6\73"+
    "\5\0\15\35\1\213\11\35\2\0\3\35\1\213\3\35"+
    "\23\0\6\73\5\0\7\35\1\213\17\35\2\0\7\35"+
    "\23\0\6\73\5\0\17\35\1\257\7\35\2\0\7\35"+
    "\12\0\1\260\103\0\1\261\67\0\1\262\66\0\2\250"+
    "\1\251\1\250\1\252\5\250\1\232\63\250\12\253\1\233"+
    "\65\253\1\251\7\253\1\233\63\253\12\254\1\0\63\254"+
    "\20\0\6\73\5\0\22\35\1\107\4\35\2\0\6\35"+
    "\1\107\23\0\6\73\5\0\4\35\1\107\22\35\2\0"+
    "\7\35\23\0\6\73\5\0\1\263\26\35\2\0\1\35"+
    "\1\263\5\35\23\0\6\264\47\0\1\264\20\0\6\73"+
    "\5\0\2\35\1\156\24\35\2\0\7\35\23\0\6\265"+
    "\47\0\1\265\20\0\6\266\47\0\1\266\20\0\6\267"+
    "\47\0\1\267\7\0\1\270\66\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9610];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\36\1\2\11\2\1\2\11"+
    "\2\1\1\0\1\11\5\0\3\1\1\0\1\1\1\0"+
    "\41\1\4\0\36\1\3\0\1\11\1\1\1\0\20\1"+
    "\4\0\1\1\1\0\11\1\3\0\3\1\1\0\4\1"+
    "\1\11\1\0\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[184];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column) {
        return new Token(lexeme, lexicalComp, line + 1, column + 1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR_LEXICO_1", yyline, yycolumn);
            }
            // fall through
          case 37: break;
          case 2:
            { /* Ignorar */
            }
            // fall through
          case 38: break;
          case 3:
            { return token(yytext(), "Arit", yyline, yycolumn);
            }
            // fall through
          case 39: break;
          case 4:
            { return token(yytext(), "AG_Parentesis_Abre", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 5:
            { return token(yytext(), "AG_Parentesis_Cierra", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 6:
            { return token(yytext(), "Coma", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 7:
            { return token(yytext(), "Punto", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 8:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 9:
            { return token(yytext(), "DosPuntos", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 10:
            { return token(yytext(), "Punto_Coma", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 11:
            { return token(yytext(), "C", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 12:
            { return token(yytext(), "A_Asignacion", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 13:
            { return token(yytext(), "ERROR_LEXICO_5", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 14:
            { return token(yytext(), "AG_Corchete_Abre", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 15:
            { return token(yytext(), "AG_Corchete_Cierra", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 16:
            { return token(yytext(), "AG_Llave_Abre", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 17:
            { return token(yytext(), "AG_Llave_Cierra", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 18:
            { return token(yytext(), "ERROR_ESPACIOS", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 19:
            { return token(yytext(), "ERROR_LEXICO_7", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 20:
            { return token(yytext(), "CADENA", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 21:
            { return token(yytext(), "ERROR_LEXICO_6", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 22:
            { return token(yytext(), "ERROR_LEXICO_3", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 23:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 24:
            { return token(yytext(), "PALABRA_RESERVADA", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 25:
            { return token(yytext(), "CONDICIONALES", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 26:
            { return token(yytext(), "L_O", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 27:
            { return token(yytext(), "FUNCION", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 28:
            { return token(yytext(), "ERROR_LEXICO_2", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 29:
            { return token(yytext(), "L_SI", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 30:
            { return token(yytext(), "L_NO", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 31:
            { return token(yytext(), "CICLOS", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 32:
            { return token(yytext(), "TIPO_DE_DATO", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 33:
            { return token(yytext(), "NOMBREFUNCION", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 34:
            { return token(yytext(), "CADENA_HORA", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 35:
            { return token(yytext(), "CADENA_MINUTO", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 36:
            { return token(yytext(), "CADENA_FECHA", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
